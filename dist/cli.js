#!/usr/bin/env node
"use strict";var f=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(e,r,t,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of l(r))!g.call(e,o)&&o!==t&&a(e,o,{get:()=>r[o],enumerable:!(s=u(r,o))||s.enumerable});return e};var d=(e,r,t)=>(t=e!=null?f(h(e)):{},y(r||!e||!e.__esModule?a(t,"default",{value:e,enumerable:!0}):t,e));var{execSync:n}=require("child_process");function B(){try{n("git rev-parse --is-inside-work-tree",{encoding:"utf-8"})}catch{console.error("No Git repository detected in the current directory"),process.exit(1)}}function w(){let e=[],r=[];B();try{e=n("git branch --format='%(refname:short)'",{encoding:"utf-8"}),r=n("git branch -r --format='%(refname:short)'",{encoding:"utf-8"}),e=e.split(`
`).filter(Boolean),r=r.split(`
`).filter(Boolean)}catch(t){console.error("Error fetching branches:",t.message)}return{localBranches:e,remoteBranches:r}}var c=w;var p=d(require("inquirer"));var m=[{type:"input",name:"name",message:"Enter name for the workflow: "},{type:"input",name:"run-name",message:"Enter name for the run (optional): "}];async function i(){return await p.default.prompt(m)}var{localBranches:P,remoteBranches:Q}=c();console.log(P,Q);function x(){let e=i();console.log(e)}x();
